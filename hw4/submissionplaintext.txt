--1.1
SELECT DISTINCT id, name FROM student NATURAL JOIN takes WHERE takes.grade = "A" AND (takes.course_id = "CS-101" OR takes.course_id = "CS-319");
 
--1.2
SELECT DISTINCT id, name FROM student NATURAL JOIN takes WHERE (takes.grade = "A" AND takes.course_id = "CS-319") OR (takes.grade != "A" AND takes.course_id = "CS-101");
 
--1.3
SELECT id FROM takes GROUP BY course_id, id HAVING COUNT(*) > 1;
 
--1.4
CREATE TABLE gradepoint (
	letter varchar(2),
	points numeric(2, 1),
	PRIMARY KEY (letter, points)
);
INSERT INTO gradepoint VALUES ("A", 4.0), ("A-", 3.7), ("B+", 3.3), ("B", 3.0), ("B-", 2.7), ("C+", 2.3), ("C", 2.0), ("C-", 1.7), ("D+", 1.3), ("D", 1.0), ("F", 0);

CREATE VIEW StudentGPA AS
SELECT t1.id, (SUM(weighted_points) / total_credits) AS gpa 
FROM (SELECT takes.id, 
(course.credits * gradepoint.points) AS weighted_points 
FROM takes 
NATURAL JOIN course 
JOIN gradepoint ON gradepoint.letter = takes.grade) AS t1 
NATURAL JOIN (SELECT takes.id, SUM(course.credits) AS total_credits 
FROM takes NATURAL JOIN course GROUP BY takes.id) AS t2 
GROUP BY id;

--1.5
--The foreign constraint belongs on the takes table to make sure that the grade column corresponds to an actual letter grade

ALTER TABLE takes 
ADD CONSTRAINT FOREIGN KEY (grade) REFERENCES gradepoint.letter;
 
--1.6
SELECT DISTINCT takes.id
FROM takes
JOIN gradepoint ON letter=grade
JOIN (SELECT id, MAX(gradepoint.points) AS maxgrade, course_id FROM takes JOIN gradepoint ON letter=grade WHERE course_id="CS-101" OR course_id="CS-347" GROUP BY id HAVING course_id="CS-347") AS t1 ON t1.id = takes.id AND maxgrade = gradepoint.points
WHERE takes.course_id="CS-101" OR takes.course_id="CS-347" 
 
--1.7

SELECT DISTINCT id
FROM takes 
WHERE (grade = "A" OR grade = "A-") AND id NOT IN (SELECT DISTINCT id FROM takes WHERE grade != "A" AND grade != "A-" GROUP BY id);
 
--1.8

SELECT section.course_id 
FROM section
INNER JOIN (SELECT course_id, year FROM section) AS t1 
ON t1.year = section.year + 1 AND section.course_id = t1.course_id
 
--1.9
  
-- Write a query to find the number of Comp Sci courses that instructor 12345 taught.

SELECT COUNT(DISTINCT course_id) FROM teaches WHERE ID=12345 AND course_id LIKE "CS%"

-- Write a query to find the total number of Comp Sci courses

SELECT COUNT(course_id) FROM course WHERE dept_name="Comp. Sci."

-- Write a predicate that uses the above two counting queries and that is true if and only if instructor 12345 taught all Comp Sci courses.

(SELECT COUNT(DISTINCT course_id) FROM teaches WHERE ID=12345 AND course_id LIKE "CS%") = (SELECT COUNT(course_id) FROM course WHERE dept_name="Comp. Sci.")

-- Now, instead of focusing on instructor 12345, enclose the predicate you just wrote in a query that will check whether an arbitrary instructor i taught all Comp Sci courses.

SELECT ID FROM instructor NATURAL JOIN teaches WHERE teaches.course_id LIKE "CS%" GROUP BY ID HAVING COUNT(*) = (SELECT COUNT(*) FROM course WHERE dept_name="Comp. Sci."); 
--1.10
  
 
--1.11

SELECT tvseries.title
FROM tvseries
LEFT JOIN watches ON watches.title = tvseries.title
WHERE watches.first_name IS NULL 

--1.12

SELECT course.course_id, ID
FROM course
LEFT JOIN teaches ON course.course_id = teaches.course_id
